typescript\nimport { Injectable, InternalServerErrorException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Submission, SubmissionDocument } from './schemas/submission.schema';\nimport { CreateSubmissionDto } from './dto/submission.dto';\n\n// محاكاة Redis (يجب استبدالها بـ Redis/Upstash في الإنتاج لـ Idempotency) \nconst idempotencyStore = new Map<string, any>(); \n\n@Injectable()\nexport class SubmissionService {\n  constructor(@InjectModel(Submission.name) private submissionModel: Model<SubmissionDocument>) {}\n\n  async create(idempotencyKey: string, submissionData: CreateSubmissionDto): Promise<any> {\n    // 1. التحقق من مفتاح Idempotency [5, 6]\n    if (idempotencyStore.has(idempotencyKey)) {\n      return idempotencyStore.get(idempotencyKey); \n    }\n\n    try {\n      // 2. إنشاء سجل جديد (يتم التشفير تلقائياً هنا)\n      const createdSubmission = new this.submissionModel(submissionData);\n      await createdSubmission.save();\n\n      // 3. تخزين الاستجابة في الذاكرة (لـ Idempotency)\n      const successResponse = {\n        message: 'تم تسجيل مستوى مساهمتك بأمان، شكرًا لك.',\n        status: 201,\n        id: createdSubmission._id,\n      };\n      \n      idempotencyStore.set(idempotencyKey, successResponse); // تخزين المفتاح\n\n      return successResponse;\n    } catch (error) {\n      // لا يتم تخزين أخطاء الخادم المؤقتة لتشجيع إعادة المحاولة الذكية [5]\n      throw new InternalServerErrorException('فشل داخلي في معالجة البيانات، جاري محاولة العميل.');\n    }\n  }\n}\n
